import os

import bot.keyboards as kb
import pandas as pd
import bot.config as cfg

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import CommandStart, Filter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.requests import (check_ban, check_event_by_name, get_users_from_mailing, check_admin, add_in_ban,
                               del_from_ban, add_in_admin, del_from_admin, add_event, get_events,
                               check_event_by_id, get_event_name_by_id, delete_event, get_signup_count, 
                               del_from_mailing, get_event_info_by_name, get_signup_people,
                               check_is_signup_open, close_event_signup, get_events_count)
from re import search, compile


# –ß—Ç–æ–±—ã –Ω–µ –ø–∏—Å–∞—Ç—å dispatcher 2-–π —Ä–∞–∑ –∑–∞–º–µ–Ω–∏–º –µ–≥–æ –Ω–∞ —Ä–æ—É—Ç–µ—Ä
admin = Router()


# –°–æ–∑–¥–∞—ë–º –∫–ª–∞—Å—Å (—Ñ–∏–ª—å—Ç—Ä) –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞
class AdminProtect(Filter):
    async def __call__(self, message: Message):
        return await check_admin(chat_id=message.from_user.id)

# –°–æ–∑–¥–∞—ë–º –∫–ª–∞—Å—Å (—Ñ–∏–ª—å—Ç—Ä) –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
class EventCheck(Filter):
    async def __call__(self, message: Message):
        return await check_event_by_name(event_name=message.text)

# –°–æ–∑–¥–∞—ë–º –∫–ª–∞—Å—Å (—Å–æ—Å—Ç–æ—è–Ω–∏–µ) –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
class Mailing(StatesGroup):
    message = State()
    photo = State()
    confirm = State()

class BanUser(StatesGroup):
    id = State()

class UnbanUser(StatesGroup):
    id = State()

class AddAdmin(StatesGroup):
    id = State()

class DelAdmin(StatesGroup):
    id = State()

class AddEvent(StatesGroup):
    name = State()
    date = State()
    description = State()
    confirm = State()

class DelEvent(StatesGroup):
    id = State()
    confirm = State()

class EventChoice(StatesGroup):
    event_name = State()

@admin.message(AdminProtect(), CommandStart())
async def start_command(message: Message):
    await message.answer_sticker("CAACAgIAAxkBAAEFm5ZmTgIqpv3A8pzMD_lR3EsFPA0u8gACXAwAAj0zCEiRSKTz6TfmmDUE")
    await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!", reply_markup=await kb.get_start_menu(rights="admin"))

@admin.message(AdminProtect(), F.text == "‚öôÔ∏è–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
async def btn_ADMIN_PANEL_click(message: Message):
    await message.answer("–û—Ç–∫—Ä—ã–≤–∞—é –∞–¥–º–∏–Ω.–ø–∞–Ω–µ–ª—å", reply_markup=kb.ADMIN_PANEL)

@admin.message(AdminProtect(), F.text == "ü§ñ–ù–∞–∑–∞–¥")
async def btn_back_to_start_menu_click(message: Message):
    await message.answer("–û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é", reply_markup=await kb.get_start_menu(rights="admin"))

@admin.message(AdminProtect(), F.text == "üö´–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def btn_ban_user_click(message: Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...", reply_markup=kb.ADMIN_CANCEL_MARKUP)
    await state.set_state(BanUser.id)

@admin.message(F.text == "‚ùå–û—Ç–º–µ–Ω–∞")
async def btn_cancel_action_click(message: Message, state: FSMContext):
    await message.answer("–û—Ç–º–µ–Ω—è—é –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=kb.ADMIN_PANEL)
    await state.clear()

@admin.message(BanUser.id)
async def wait_id_to_ban_user(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
    if message.text is not None and message.text.isdigit():
        await state.clear()
        chat_id = int(message.text)
        if await check_ban(chat_id=chat_id):
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –±–∞–Ω–µ!", reply_markup=kb.ADMIN_PANEL)
        elif await check_admin(chat_id=chat_id):
            await message.answer("–ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=kb.ADMIN_PANEL)
        else:
            await add_in_ban(chat_id=chat_id)
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω!", reply_markup=kb.ADMIN_PANEL)
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!")

@admin.message(AdminProtect(), F.text == "‚úÖ–†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def btn_unban_user_click(message: Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...", reply_markup=kb.ADMIN_CANCEL_MARKUP)
    await state.set_state(UnbanUser.id)

@admin.message(UnbanUser.id)
async def wait_id_to_unban(message: Message, state: FSMContext):
    if message.text is not None and message.text.isdigit():
        await state.clear()
        chat_id = int(message.text)
        if await check_ban(chat_id=chat_id):
            await del_from_ban(chat_id=chat_id)
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω!", reply_markup=kb.ADMIN_PANEL)
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω!", reply_markup=kb.ADMIN_PANEL)
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!")

@admin.message(AdminProtect(), F.text == "‚ûï–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞")
async def btn_add_adm_click(message: Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...", reply_markup=kb.ADMIN_CANCEL_MARKUP)
    await state.set_state(AddAdmin.id)

@admin.message(AddAdmin.id)
async def wait_id_to_add_admin(message: Message, state: FSMContext):
    if message.text is not None and message.text.isdigit():
        await state.clear()
        chat_id = int(message.text)
        if await check_admin(chat_id=chat_id):
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º!", reply_markup=kb.ADMIN_PANEL)
        else:
            await add_in_admin(chat_id=chat_id)
            await message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=kb.ADMIN_PANEL)
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!")

@admin.message(AdminProtect(), F.text == "‚ûñ–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞")
async def btn_del_adm_click(message: Message, state: FSMContext):
   await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...", reply_markup=kb.ADMIN_CANCEL_MARKUP)
   await state.set_state(DelAdmin.id)
  
@admin.message(DelAdmin.id)
async def wait_id_to_del_admin(message: Message, state: FSMContext):
    if message.text is not None and message.text.isdigit():
        await state.clear()
        chat_id = int(message.text)
        if await check_admin(chat_id=chat_id):
            await del_from_admin(chat_id=chat_id)
            await message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª—ë–Ω!", reply_markup=kb.ADMIN_PANEL)
        else:
            await message.answer("–¢–∞–∫–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", reply_markup=kb.ADMIN_PANEL)
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!")

@admin.message(AdminProtect(), F.text == "üó£Ô∏è–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def btn_mailing_click(message: Message, state: FSMContext):
    await state.set_state(Mailing.message)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏...", reply_markup=kb.ADMIN_CANCEL_MARKUP)

@admin.message(Mailing.message)
async def wait_mailing_message(message: Message, state: FSMContext):
    if message.text is not None:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
        await state.update_data(message=message.text)
        await message.answer("–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ–æ—Ç–≥—Ä–∞—Ñ–∏—é –∫ —Ä–∞—Å—Å—ã–ª–∫–µ?"
                             "\n–ï—Å–ª–∏ –¥–∞, —Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –µ—ë url-–∞–¥—Ä–µ—Å—Å."
                             "\n–í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–Ω–∞–∫ '-' —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–µ–∑ –∫–∞–≤—ã—á–µ–∫",
                             reply_markup=kb.ADMIN_CANCEL_MARKUP)
        await state.set_state(Mailing.photo)
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!")

@admin.message(Mailing.photo)
async def wait_mailing_photo(message: Message, state: FSMContext):
    data_from_state: dict = await state.get_data()
    message_from_admin: str = data_from_state.get("message")
    url_of_photo = message.text
    if url_of_photo is not None:
        if url_of_photo == "-":
            await message.answer(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É!\n\n{message_from_admin}", 
                                 reply_markup=await kb.get_confirm_menu(callback="confirm_mailing"))
            await state.set_state(Mailing.confirm)
        elif search(compile("^(https|http)://.+/impg/.+$"), url_of_photo): 
            await state.update_data(photo=url_of_photo) 
            await message.answer_photo(f"{url_of_photo}", caption=f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É!\n\n{message_from_admin}", 
                                       reply_markup=await kb.get_confirm_menu(callback="confirm_mailing"))
            await state.set_state(Mailing.confirm)
        else:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url –∞–¥—Ä–µ—Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!", reply_markup=kb.ADMIN_CANCEL_MARKUP)
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!", reply_markup=kb.ADMIN_CANCEL_MARKUP)

# –û–±—Ä–∞–±–æ—Ç–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏ 
@admin.callback_query(Mailing.confirm)
async def confirm_mailing_callback(callback: CallbackQuery, state: FSMContext):
   await callback.message.delete()
   if callback.data == "confirm_mailing":
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await get_users_from_mailing()
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        data_from_state: dict = await state.get_data()
        message_from_admin: str = data_from_state.get("message")
        photo_from_admin: str = data_from_state.get("photo")
        for user in users:
            try:
                if photo_from_admin is None:
                    await cfg.BOT.send_message(chat_id=user.chat_id, text=message_from_admin)
                else:
                    await cfg.BOT.send_photo(chat_id=user.chat_id, photo=photo_from_admin, caption=message_from_admin)
            except:
                # —É–¥–∞–ª—è–µ–º —á–µ–ª–æ–≤–µ–∫–∞ –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏, –ø–æ—Å–∫–æ–ª—å–∫—É –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
                await del_from_mailing(chat_id=user)
        await callback.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=kb.ADMIN_PANEL)
        await state.clear()
   else:
        await callback.message.answer("–û—Ç–º–µ–Ω—è—é —Ä–∞—Å—Å—ã–ª–∫—É!\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!",
                                      reply_markup=kb.ADMIN_CANCEL_MARKUP)
        await state.set_state(Mailing.message)

@admin.message(AdminProtect(), F.text == "üéá–°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
async def btn_create_event_click(message: Message, state: FSMContext):
    await state.set_state(AddEvent.name)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ!", reply_markup=kb.ADMIN_CANCEL_MARKUP)

@admin.message(AddEvent.name)
async def waiting_event_name(message: Message, state: FSMContext):
    event_name = message.text
    if event_name is not None:
        if await check_event_by_name(event_name=event_name) is None:
            await state.update_data(name=event_name)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!\n–ü—Ä–∏–º–µ—Ä: 12.02.2024 15:00", reply_markup=kb.ADMIN_CANCEL_MARKUP)
            await state.set_state(AddEvent.date)
        else:
            await message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", reply_markup=kb.ADMIN_PANEL)
            await state.clear()
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!", reply_markup=kb.ADMIN_CANCEL_MARKUP)

@admin.message(AddEvent.date)
async def waiting_date_of_event(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —à–∞–±–ª–æ–Ω—É –¥–¥.–º–º.–≥–≥–≥–≥ —á—á.–º–º
    reg_exp = "^(0[1-9]|[12][0-9]|3[01]).(0[1-9]|1[0-2]).20([2][4]|[2-9][0-9]) ([0-1][0-9]|[2][0-3]):[0-5][0-9]$"
    date = message.text
    if date is not None and search(compile(reg_exp), date) : 
        last_days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
        data_from_admin = date.split()[0]
        day = int(data_from_admin[:2])
        month = int(data_from_admin[3:5])
        year = int(data_from_admin[6:])
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ–¥–∞ –Ω–∞ –≤–∏—Å–æ–∫–æ—Å–Ω–æ—Å—Ç—å
        if (year % 4 == 0 and year % 100 != 0 or year % 400 == 0):
            last_days_in_month[1] = 29            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω—É—é –¥–∞—Ç—É –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å    
        if (day <= last_days_in_month[month-1]):
            await state.update_data(date=date)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!", reply_markup=kb.ADMIN_CANCEL_MARKUP)
            await state.set_state(AddEvent.description)
        else:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞!", reply_markup=kb.ADMIN_CANCEL_MARKUP)
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!", reply_markup=kb.ADMIN_CANCEL_MARKUP)

@admin.message(AddEvent.description)
async def waiting_event_disc(message: Message, state: FSMContext):
    description = message.text
    if description is not None:
        data_from_state: dict = await state.get_data()
        event_name: str = data_from_state.get("name")
        event_date: str = data_from_state.get("date")
        await state.update_data(description=description)   
        await message.answer(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!"
                             f"\n–ù–∞–∑–≤–∞–Ω–∏–µ : {event_name}"
                             f"\n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {event_date}"
                             f"\n–û–ø–∏—Å–∞–Ω–∏–µ : {description}",
                             reply_markup=await kb.get_confirm_menu(callback="confirm_add_event"))
        await state.set_state(AddEvent.confirm)
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!", reply_markup=kb.ADMIN_CANCEL_MARKUP)

# –û–±—Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin.callback_query(AddEvent.confirm)
async def confirm_create_event_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    if callback.data == "confirm_add_event":
        data_from_state: dict = await state.get_data()
        event_name: str = data_from_state.get("name")
        event_date: str = data_from_state.get("date")
        event_description: str = data_from_state.get("description")
        await add_event(event_name=event_name, event_description=event_description, event_date=event_date)
        await callback.message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=kb.ADMIN_PANEL)
        await state.clear()
    else:
        await callback.message.answer("–û—Ç–º–µ–Ω—è—é —Å–æ–∑–¥–∞–Ω–∏–µ!\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!",
                                      reply_markup=kb.ADMIN_CANCEL_MARKUP)
        await state.set_state(AddEvent.name)

@admin.message(AdminProtect(), F.text == "üéÜ–£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
async def btn_delete_event_click(message: Message, state: FSMContext):
    if await get_events_count() > 0:
        events_enumerate: str = ""
        for event in await get_events():
            events_enumerate += f"{event.id}. {event.name}\n"
        await message.answer(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!\n{events_enumerate}", reply_markup=kb.ADMIN_CANCEL_MARKUP)
        await state.set_state(DelEvent.id)
    else:
        await message.answer("–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π,–∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å!", reply_markup=kb.ADMIN_PANEL)
        await state.clear()

@admin.message(DelEvent.id)
async def waiting_id_of_event(message: Message, state: FSMContext):
    event_id = message.text
    if event_id is not None and event_id.isdigit():
        if await check_event_by_id(event_id=int(event_id)):
            await state.update_data(id=event_id)
            await message.answer(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!\n{event_id}. "
            f"{(await get_event_name_by_id(event_id=int(event_id))).name}", 
                reply_markup=await kb.get_confirm_menu(callback="confirm_del_event"))
            await state.set_state(DelEvent.confirm)
        else:
            await message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", reply_markup=kb.ADMIN_PANEL)
            await state.clear()
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!", reply_markup=kb.ADMIN_CANCEL_MARKUP)

@admin.callback_query(DelEvent.confirm)
async def confirm_del_event_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    if callback.data == "confirm_del_event":
        data_from_state: dict = await state.get_data()
        event_id: str = data_from_state.get("id")
        await delete_event(event_id=int(event_id))
        await callback.message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ!", reply_markup=kb.ADMIN_PANEL)
        await state.clear()
    else:
        await callback.message.answer("–û—Ç–º–µ–Ω—è—é —É–¥–∞–ª–µ–Ω–∏–µ!\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä!",
                                      reply_markup=kb.ADMIN_CANCEL_MARKUP)
        await state.set_state(DelEvent.id)

@admin.message(AdminProtect(), F.text == "üëà–ù–∞–∑–∞–¥")
async def btn_back_click(message: Message, state: FSMContext):
    await message.answer("–û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é", reply_markup=await kb.get_start_menu(rights="admin"))
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –ø–æ –æ–¥–Ω–æ–º—É –∏–∑ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
@admin.message(AdminProtect(), EventCheck())
async def btn_event_name_click(message: Message, state: FSMContext):
    await state.update_data(event_name=message.text)
    await message.answer_sticker("CAACAgIAAxkBAAEDpPBl1WcOfjU0kJaSf9y882BG36ONiwACMw4AApVxCUiC2Rae9Yv1wzQE")
    event_info = await get_event_info_by_name(event_name=message.text)
    await message.answer(f"üéâ–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è : {message.text}"
                         f"\nüìÜ–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {event_info.date}"
                         f"\nüéä–û–ø–∏—Å–∞–Ω–∏–µ: {event_info.description} "
                         f"\n‚úèÔ∏è–ó–∞–ø–∏—Å—å: {"–æ—Ç–∫—Ä—ã—Ç–∞" if await check_is_signup_open(event_name=message.text) is not None else "–∑–∞–∫—Ä—ã—Ç–∞"}", 
                         reply_markup=await kb.get_event_menu(rights="admin"))
    await state.set_state(EventChoice.event_name)

@admin.message(AdminProtect(), EventChoice.event_name, F.text == "‚ùå–ó–∞–∫—Ä—ã—Ç—å –∑–∞–ø–∏—Å—å")
async def btn_close_signup_event(message: Message, state: FSMContext):
    data_from_state: dict = await state.get_data()
    event_name: str = data_from_state.get("event_name")
    if await check_is_signup_open(event_name=event_name) is not None:
        await message.answer(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event_name}\n–£—á—Ç–∏—Ç–µ, —á—Ç–æ" 
                             " –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–ø–∏—Å—å!", 
                             reply_markup=await kb.get_confirm_menu("confirm_close_event"))
    else:
        await message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ!")

@admin.callback_query(EventChoice.event_name)
async def confirm_close_event_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    if callback.data == "confirm_close_event":
        data_from_state: dict = await state.get_data()
        event_name: str = data_from_state.get("event_name")
        await close_event_signup(event_name=event_name)
        await callback.message.answer("–ó–∞–ø–∏—Å—å –∑–∞–∫—Ä—ã—Ç–∞!", reply_markup=await kb.get_event_menu(rights="admin"))
    else:
        await callback.message.answer("–û—Ç–º–µ–Ω—è—é –∑–∞–∫—Ä—ã—Ç–∏–µ!", reply_markup=await kb.get_event_menu(rights="admin"))

@admin.message(AdminProtect(), EventChoice.event_name, F.text == "üë•–ó–∞–ø–∏—Å–∞–≤—à–∏–µ—Å—è")
async def btn_signup_click(message: Message, state: FSMContext):
    data_from_state: dict = await state.get_data()
    event_name: str = data_from_state.get("event_name")
    if await get_signup_count(event_name=event_name) == 0:
        await message.answer("–ù–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è!")
    else:
        # –ü—Ä–∏–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ DataFrame 
        table = pd.DataFrame(await get_signup_people(event_name=event_name))
        # –°–æ–∑–¥–∞—ë–º excel —Ñ–∞–π–ª —Å –Ω–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
        table.to_excel(f"{event_name}.xlsx", sheet_name="–ó–∞–ø–∏—Å–∞–≤—à–∏–µ—Å—è",index=False)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏        
        await message.answer_document(document=FSInputFile(path=os.path.join(os.getcwd(), f"{event_name}.xlsx")))
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        os.remove(os.path.join(os.getcwd(), f"{event_name}.xlsx"))       
